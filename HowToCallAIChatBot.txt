                            var simplifyPrompt = @"
You are a health and safety trainer teaching students to work at a summer program at a disaster recovery site, and some students speak English as a second language. You need to explain learning objectives from a health and safety training session. Simplify the objectives to an 8th-grade reading level using clear, simple words and short sentences suitable for non-native English speakers. Avoid complex terms where possible. Then, scan the simplified objectives and identify terms or phrases that an 8th grader (age 13-14) might not understand. Provide concise definitions for these terms at an 8th-grade level. Return the result as a JSON object with two keys:
- ""objectives"": a list of simplified objectives (each starting with '- ')
- ""glossary"": a dictionary with terms as keys and 8th-grade-level definitions as values
Example:
{
  ""objectives"": [""- Know the signs of health problems."", ""- Stay safe by following rules.""],
  ""glossary"": {""health problems"": ""Issues that make you feel sick or hurt.""}
}

Objectives to simplify:
{objectives_text}
".Replace("{objectives_text}", objectivesText);

results.Add("Sending API request for objectives simplification.");
var simplifyResponse = await AskGrok(simplifyPrompt, 2000);


private async Task<string> AskGrok(string prompt, int maxTokens = 1000)
{
    string apiKey = _aISettings.GrokApiKey;
    var requestBody = new
    {
        model = "grok-2-latest",
        messages = new[]
        {
            new { role = "user", content = prompt }
        },
        max_tokens = maxTokens,
        temperature = 0.7
    };

    var json = JsonConvert.SerializeObject(requestBody);
    var httpRequest = new HttpRequestMessage
    {
        Method = HttpMethod.Post,
        RequestUri = new Uri("https://api.x.ai/v1/chat/completions"),
        Content = new StringContent(json, Encoding.UTF8, "application/json")
    };
    httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
    var response = await _httpClient.SendAsync(httpRequest);
    var responseText = await response.Content.ReadAsStringAsync();

    if (!response.IsSuccessStatusCode)
    {
        return null;
    }

    return responseText;
}

private async Task<string> AskChatGpt(string prompt)
{
    string apiKey = _aISettings.ChatgptApiKey;

    var requestBody = new
    {
        model = "gpt-4",
        messages = new[]
        {
            new { role = "user", content = prompt }
        },
        temperature = 0.7
    };

    var json = JsonConvert.SerializeObject(requestBody);

    var httpRequest = new HttpRequestMessage
    {
        Method = HttpMethod.Post,
        RequestUri = new Uri("https://api.openai.com/v1/chat/completions"),
        Content = new StringContent(json, Encoding.UTF8, "application/json")
    };

    httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);

    var response = await _httpClient.SendAsync(httpRequest);
    var responseText = await response.Content.ReadAsStringAsync();

    if (!response.IsSuccessStatusCode)
    {
        return null;
    }

    var parsed = JsonConvert.DeserializeObject<dynamic>(responseText);
    string reply = parsed?.choices?[0]?.message?.content?.ToString();

    return reply ?? "No response received.";
}